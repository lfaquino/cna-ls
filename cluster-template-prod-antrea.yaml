---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - '${ CLUSTER_CIDR}'  # CIDR block used by Calico
    services:
      cidrBlocks:
      - '${ SERVICE_CIDR }' # CIDR block used by Calico
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    kind: KubeadmControlPlane
    name: '${ CLUSTER_NAME }-control-plane'
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereCluster
    name: '${ CLUSTER_NAME }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: HAProxyLoadBalancer
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
  name: '${ CLUSTER_NAME }-${ NAMESPACE }'
  namespace: '${ NAMESPACE }'
spec:
  user:
    authorizedKeys:
    - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
    name: capv
  virtualMachineConfiguration:
    cloneMode: linkedClone
    datacenter: '${ VSPHERE_DATACENTER }'
    datastore: '${ VSPHERE_DATASTORE }'
    diskGiB: ${VSPHERE_HA_PROXY_DISK_GIB}
    folder: '${ VSPHERE_FOLDER }'
    memoryMiB: ${VSPHERE_HA_PROXY_MEM_MIB}
    network:
      devices:
      - dhcp4: true
        networkName: '${ VSPHERE_NETWORK }'
    numCPUs: ${VSPHERE_HA_PROXY_NUM_CPUS}
    resourcePool: '${ VSPHERE_RESOURCE_POOL }'
    server: '${ VSPHERE_SERVER }'
    template: '${ VSPHERE_HAPROXY_TEMPLATE }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereCluster
metadata:
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
spec:
  cloudProviderConfiguration:
    global:
      insecure: true
      secretName: cloud-provider-vsphere-credentials
      secretNamespace: kube-system
    network:
      name: '${ VSPHERE_NETWORK }'
    providerConfig:
      cloud:
        controllerImage: '${ _TKG_CCM_CONTROLLER_IMAGE }'
        extraArgs:
          tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      storage:
        attacherImage: '${ _TKG_CSI_ATTACHER_IMAGE }'
        controllerImage: '${ _TKG_CSI_CONTROLLER_IMAGE }'
        livenessProbeImage: '${ _TKG_CSI_LIVENESS_PROBE_IMAGE }'
        metadataSyncerImage: '${ _TKG_CSI_META_DATA_SYNCER_IMAGE }'
        nodeDriverImage: '${ _TKG_CSI_CONTROLLER_IMAGE }'
        provisionerImage: '${ _TKG_CSI_PROVISONER_IMAGE }'
        registrarImage: '${ _TKG_CSI_NODE_DRIVER_REGISTRAR_IMAGE }'
    virtualCenter:
      ${ VSPHERE_SERVER }:
        datacenters: '${ VSPHERE_DATACENTER }'
    workspace:
      datacenter: '${ VSPHERE_DATACENTER }'
      datastore: '${ VSPHERE_DATASTORE }'
      folder: '${ VSPHERE_FOLDER }'
      resourcePool: '${ VSPHERE_RESOURCE_POOL }'
      server: '${ VSPHERE_SERVER }'
  loadBalancerRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: HAProxyLoadBalancer
    name: '${ CLUSTER_NAME }-${ NAMESPACE }'
  server: '${ VSPHERE_SERVER }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereMachineTemplate
metadata:
  name: '${ CLUSTER_NAME }-control-plane'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      cloneMode: linkedClone
      datacenter: '${ VSPHERE_DATACENTER }'
      datastore: '${ VSPHERE_DATASTORE }'
      diskGiB: ${VSPHERE_CONTROL_PLANE_DISK_GIB}
      folder: '${ VSPHERE_FOLDER }'
      memoryMiB: ${VSPHERE_CONTROL_PLANE_MEM_MIB}
      network:
        devices:
        - dhcp4: true
          networkName: '${ VSPHERE_NETWORK }'
      numCPUs: ${ VSPHERE_CONTROL_PLANE_NUM_CPUS }
      resourcePool: '${ VSPHERE_RESOURCE_POOL }'
      server: '${ VSPHERE_SERVER }'
      template: '${ VSPHERE_TEMPLATE }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereMachineTemplate
metadata:
  name: '${ CLUSTER_NAME }-worker'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      cloneMode: linkedClone
      datacenter: '${ VSPHERE_DATACENTER }'
      datastore: '${ VSPHERE_DATASTORE }'
      diskGiB: ${VSPHERE_WORKER_DISK_GIB}
      folder: '${ VSPHERE_FOLDER }'
      memoryMiB: ${VSPHERE_WORKER_MEM_MIB}
      network:
        devices:
        - dhcp4: true
          networkName: '${ VSPHERE_NETWORK }'
      numCPUs: ${ VSPHERE_WORKER_NUM_CPUS }
      resourcePool: '${ VSPHERE_RESOURCE_POOL }'
      server: '${ VSPHERE_SERVER }'
      template: '${ VSPHERE_TEMPLATE }'
---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
kind: KubeadmControlPlane
metadata:
  name: '${ CLUSTER_NAME }-control-plane'
  namespace: '${ NAMESPACE }'
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereMachineTemplate
    name: '${ CLUSTER_NAME }-control-plane'
  kubeadmConfigSpec:
    useExperimentalRetryJoin: true
    clusterConfiguration:
      imageRepository: '${ _TKG_K8S_IMAGE_REPOSITORY }'
      kubernetesVersion: '${ KUBERNETES_VERSION }'
      etcd:
        local:
          dataDir: /var/lib/etcd
          imageRepository: '${ _TKG_ETCD_IMAGE_REPOSITORY }'
          imageTag: '${ _TKG_ETCD_IMAGE_TAG }'
          extraArgs:
            cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      dns:
        type: CoreDNS
        imageRepository: '${ _TKG_COREDNS_IMAGE_REPOSITORY }'
        imageTag: '${ _TKG_COREDNS_IMAGE_TAG }'
      apiServer:
        timeoutForControlPlane: "8m0s"
        extraArgs:
          cloud-provider: external
          tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      controllerManager:
        extraArgs:
          cloud-provider: external
          tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      scheduler:
        extraArgs:
          tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
          tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        name: '{{ ds.meta_data.hostname }}'
    joinConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
          tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        name: '{{ ds.meta_data.hostname }}'
    preKubeadmCommands:
    - hostname "{{ ds.meta_data.hostname }}"
    - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    - echo "127.0.0.1   localhost" >>/etc/hosts
    - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
    - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
    - echo "nameserver 192.168.110.10" > /usr/lib/systemd/resolv.conf
    - echo "domain corp.local" >> /usr/lib/systemd/resolv.conf
    - rm /etc/resolv.conf
    - ln -s /usr/lib/systemd/resolv.conf /etc/resolv.conf
    - mkdir -p /etc/containerd
    - containerd config default > /etc/containerd/config.toml
    - echo "" > /etc/containerd/config.toml
    - sed -i '1 i\# Use config version 2 to enable new configuration fields.' /etc/containerd/config.toml
    - sed -i '2 i\# Config file is parsed as version 1 by default.' /etc/containerd/config.toml
    - sed -i '3 i\version = 2' /etc/containerd/config.toml
    - sed -i '4 i\ ' /etc/containerd/config.toml
    - sed -i '5 i\[plugins]' /etc/containerd/config.toml
    - sed -i '6 i\  [plugins."io.containerd.grpc.v1.cri"]' /etc/containerd/config.toml
    - sed -i '7 i\    sandbox_image = "registry.tkg.vmware.run/pause:3.2"' /etc/containerd/config.toml
    - sed -i '8 i\    [plugins."io.containerd.grpc.v1.cri".registry]' /etc/containerd/config.toml
    - sed -i '9 i\      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]' /etc/containerd/config.toml
    - sed -i '10 i\        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."harbor-01a.corp.local"]' /etc/containerd/config.toml
    - sed -i '11 i\          endpoint = ["https://harbor-01a.corp.local"]' /etc/containerd/config.toml
    - sed -i '12 i\      [plugins."io.containerd.grpc.v1.cri".registry.configs]' /etc/containerd/config.toml
    - sed -i '13 i\        [plugins."io.containerd.grpc.v1.cri".registry.configs."harbor-01a.corp.local"]' /etc/containerd/config.toml
    - sed -i '14 i\          [plugins."io.containerd.grpc.v1.cri".registry.configs."harbor-01a.corp.local".tls]' /etc/containerd/config.toml
    - sed -i '15 i\            insecure_skip_verify = true' /etc/containerd/config.toml
    - systemctl restart containerd
    users:
    - name: capv
      sshAuthorizedKeys:
      - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
      sudo: ALL=(ALL) NOPASSWD:ALL
  replicas: ${ CONTROL_PLANE_MACHINE_COUNT }
  version: '${ KUBERNETES_VERSION }'
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: '${ CLUSTER_NAME }-md-0'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      useExperimentalRetryJoin: true
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
            tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          name: '{{ ds.meta_data.hostname }}'
      preKubeadmCommands:
      - hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
      - echo "nameserver 192.168.110.10" > /usr/lib/systemd/resolv.conf
      - echo "domain corp.local" >> /usr/lib/systemd/resolv.conf
      - rm /etc/resolv.conf
      - ln -s /usr/lib/systemd/resolv.conf /etc/resolv.conf
      - mkdir -p /etc/containerd
      - containerd config default > /etc/containerd/config.toml
      - echo "" > /etc/containerd/config.toml
      - sed -i '1 i\# Use config version 2 to enable new configuration fields.' /etc/containerd/config.toml
      - sed -i '2 i\# Config file is parsed as version 1 by default.' /etc/containerd/config.toml
      - sed -i '3 i\version = 2' /etc/containerd/config.toml
      - sed -i '4 i\ ' /etc/containerd/config.toml
      - sed -i '5 i\[plugins]' /etc/containerd/config.toml
      - sed -i '6 i\  [plugins."io.containerd.grpc.v1.cri"]' /etc/containerd/config.toml
      - sed -i '7 i\    sandbox_image = "registry.tkg.vmware.run/pause:3.2"' /etc/containerd/config.toml
      - sed -i '8 i\    [plugins."io.containerd.grpc.v1.cri".registry]' /etc/containerd/config.toml
      - sed -i '9 i\      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]' /etc/containerd/config.toml
      - sed -i '10 i\        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."harbor-01a.corp.local"]' /etc/containerd/config.toml
      - sed -i '11 i\          endpoint = ["https://harbor-01a.corp.local"]' /etc/containerd/config.toml
      - sed -i '12 i\      [plugins."io.containerd.grpc.v1.cri".registry.configs]' /etc/containerd/config.toml
      - sed -i '13 i\        [plugins."io.containerd.grpc.v1.cri".registry.configs."harbor-01a.corp.local"]' /etc/containerd/config.toml
      - sed -i '14 i\          [plugins."io.containerd.grpc.v1.cri".registry.configs."harbor-01a.corp.local".tls]' /etc/containerd/config.toml
      - sed -i '15 i\            insecure_skip_verify = true' /etc/containerd/config.toml
      - systemctl restart containerd
      - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
      users:
      - name: capv
        sshAuthorizedKeys:
        - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
        sudo: ALL=(ALL) NOPASSWD:ALL
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
  name: '${ CLUSTER_NAME }-md-0'
  namespace: '${ NAMESPACE }'
spec:
  clusterName: '${ CLUSTER_NAME }'
  replicas: ${ WORKER_MACHINE_COUNT }
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
        node-pool: "${CLUSTER_NAME}-worker-pool"
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
          name: '${ CLUSTER_NAME }-md-0'
      clusterName: '${ CLUSTER_NAME }'
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: VSphereMachineTemplate
        name: '${ CLUSTER_NAME }-worker'
      version: '${ KUBERNETES_VERSION }'
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineHealthCheck
metadata:
  name: "${CLUSTER_NAME}"
spec:
  clusterName: "${CLUSTER_NAME}"
  nodeStartupTimeout: "${NODE_STARTUP_TIMEOUT}"
  selector:
    matchLabels:
      node-pool: "${CLUSTER_NAME}-worker-pool"
  unhealthyConditions:
  - type: Ready
    status: Unknown
    timeout: 5m
  - type: Ready
    status: "False"
    timeout: 5m
---
apiVersion: v1
kind: Secret
metadata:
  name: ${CLUSTER_NAME}-postcreate
  namespace: ${NAMESPACE}
stringData:
  calicoYaml: |
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        app: antrea
      name: antreaagentinfos.clusterinformation.antrea.tanzu.vmware.com
    spec:
      group: clusterinformation.antrea.tanzu.vmware.com
      names:
        kind: AntreaAgentInfo
        plural: antreaagentinfos
        shortNames:
        - aai
        singular: antreaagentinfo
      scope: Cluster
      versions:
      - name: v1beta1
        served: true
        storage: true
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        app: antrea
      name: antreacontrollerinfos.clusterinformation.antrea.tanzu.vmware.com
    spec:
      group: clusterinformation.antrea.tanzu.vmware.com
      names:
        kind: AntreaControllerInfo
        plural: antreacontrollerinfos
        shortNames:
        - aci
        singular: antreacontrollerinfo
      scope: Cluster
      versions:
      - name: v1beta1
        served: true
        storage: true
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        app: antrea
      name: clusternetworkpolicies.security.antrea.tanzu.vmware.com
    spec:
      additionalPrinterColumns:
      - JSONPath: .spec.tier
        description: The Tier to which this ClusterNetworkPolicy belongs to.
        name: Tier
        type: string
      - JSONPath: .spec.priority
        description: The Priority of this ClusterNetworkPolicy relative to other policies.
        format: float
        name: Priority
        type: number
      - JSONPath: .metadata.creationTimestamp
        name: Age
        type: date
      group: security.antrea.tanzu.vmware.com
      names:
        kind: ClusterNetworkPolicy
        plural: clusternetworkpolicies
        shortNames:
        - cnp
        singular: clusternetworkpolicy
      preserveUnknownFields: false
      scope: Cluster
      validation:
        openAPIV3Schema:
          properties:
            spec:
              properties:
                appliedTo:
                  items:
                    properties:
                      namespaceSelector:
                        x-kubernetes-preserve-unknown-fields: true
                      podSelector:
                        x-kubernetes-preserve-unknown-fields: true
                    type: object
                  type: array
                egress:
                  items:
                    properties:
                      action:
                        pattern: \bAllow|\bDrop
                        type: string
                      ports:
                        items:
                          properties:
                            port:
                              x-kubernetes-int-or-string: true
                            protocol:
                              type: string
                          type: object
                        type: array
                      to:
                        items:
                          properties:
                            ipBlock:
                              properties:
                                cidr:
                                  format: cidr
                                  type: string
                              type: object
                            namespaceSelector:
                              x-kubernetes-preserve-unknown-fields: true
                            podSelector:
                              x-kubernetes-preserve-unknown-fields: true
                          type: object
                        type: array
                    required:
                    - action
                    type: object
                  type: array
                ingress:
                  items:
                    properties:
                      action:
                        pattern: \bAllow|\bDrop
                        type: string
                      from:
                        items:
                          properties:
                            ipBlock:
                              properties:
                                cidr:
                                  format: cidr
                                  type: string
                              type: object
                            namespaceSelector:
                              x-kubernetes-preserve-unknown-fields: true
                            podSelector:
                              x-kubernetes-preserve-unknown-fields: true
                          type: object
                        type: array
                      ports:
                        items:
                          properties:
                            port:
                              x-kubernetes-int-or-string: true
                            protocol:
                              type: string
                          type: object
                        type: array
                    required:
                    - action
                    type: object
                  type: array
                priority:
                  format: float
                  maximum: 10000
                  minimum: 1
                  type: number
                tier:
                  enum:
                  - Emergency
                  - SecurityOps
                  - NetworkOps
                  - Platform
                  - Application
                  type: string
              required:
              - appliedTo
              - priority
              type: object
          type: object
      versions:
      - name: v1alpha1
        served: true
        storage: true
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        app: antrea
      name: externalentities.core.antrea.tanzu.vmware.com
    spec:
      group: core.antrea.tanzu.vmware.com
      names:
        kind: ExternalEntity
        plural: externalentities
        shortNames:
        - ee
        singular: externalentity
      preserveUnknownFields: false
      scope: Namespaced
      validation:
        openAPIV3Schema:
          properties:
            spec:
              properties:
                endpoints:
                  items:
                    properties:
                      ip:
                        format: ipv4
                        type: string
                      name:
                        type: string
                      ports:
                        items:
                          properties:
                            name:
                              type: string
                            port:
                              x-kubernetes-int-or-string: true
                            protocol:
                              type: string
                          type: object
                        type: array
                    type: object
                  type: array
                externalNode:
                  type: string
              type: object
          type: object
      versions:
      - name: v1alpha1
        served: true
        storage: true
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        app: antrea
      name: networkpolicies.security.antrea.tanzu.vmware.com
    spec:
      additionalPrinterColumns:
      - JSONPath: .spec.tier
        description: The Tier to which this Antrea NetworkPolicy belongs to.
        name: Tier
        type: string
      - JSONPath: .spec.priority
        description: The Priority of this Antrea NetworkPolicy relative to other policies.
        format: float
        name: Priority
        type: number
      - JSONPath: .metadata.creationTimestamp
        name: Age
        type: date
      group: security.antrea.tanzu.vmware.com
      names:
        kind: NetworkPolicy
        plural: networkpolicies
        shortNames:
        - netpol
        singular: networkpolicy
      preserveUnknownFields: false
      scope: Namespaced
      validation:
        openAPIV3Schema:
          properties:
            spec:
              properties:
                appliedTo:
                  items:
                    properties:
                      podSelector:
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                    type: object
                  type: array
                egress:
                  items:
                    properties:
                      action:
                        pattern: \bAllow|\bDrop
                        type: string
                      ports:
                        items:
                          properties:
                            port:
                              x-kubernetes-int-or-string: true
                            protocol:
                              type: string
                          type: object
                        type: array
                      to:
                        items:
                          properties:
                            ipBlock:
                              properties:
                                cidr:
                                  format: cidr
                                  type: string
                              type: object
                            namespaceSelector:
                              x-kubernetes-preserve-unknown-fields: true
                            podSelector:
                              x-kubernetes-preserve-unknown-fields: true
                          type: object
                        type: array
                    required:
                    - action
                    type: object
                  type: array
                ingress:
                  items:
                    properties:
                      action:
                        pattern: \bAllow|\bDrop
                        type: string
                      from:
                        items:
                          properties:
                            ipBlock:
                              properties:
                                cidr:
                                  format: cidr
                                  type: string
                              type: object
                            namespaceSelector:
                              x-kubernetes-preserve-unknown-fields: true
                            podSelector:
                              x-kubernetes-preserve-unknown-fields: true
                          type: object
                        type: array
                      ports:
                        items:
                          properties:
                            port:
                              x-kubernetes-int-or-string: true
                            protocol:
                              type: string
                          type: object
                        type: array
                    required:
                    - action
                    type: object
                  type: array
                priority:
                  format: float
                  maximum: 10000
                  minimum: 1
                  type: number
                tier:
                  enum:
                  - Emergency
                  - SecurityOps
                  - NetworkOps
                  - Platform
                  - Application
                  type: string
              required:
              - appliedTo
              - priority
              type: object
          type: object
      versions:
      - name: v1alpha1
        served: true
        storage: true
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        app: antrea
      name: traceflows.ops.antrea.tanzu.vmware.com
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.phase
        description: The phase of the Traceflow.
        name: Phase
        type: string
      - JSONPath: .spec.source.pod
        description: The name of the source Pod.
        name: Source-Pod
        priority: 10
        type: string
      - JSONPath: .spec.destination.pod
        description: The name of the destination Pod.
        name: Destination-Pod
        priority: 10
        type: string
      - JSONPath: .spec.destination.ip
        description: The IP address of the destination.
        name: Destination-IP
        priority: 10
        type: string
      - JSONPath: .metadata.creationTimestamp
        name: Age
        type: date
      group: ops.antrea.tanzu.vmware.com
      names:
        kind: Traceflow
        plural: traceflows
        shortNames:
        - tf
        singular: traceflow
      preserveUnknownFields: false
      scope: Cluster
      subresources:
        status: {}
      validation:
        openAPIV3Schema:
          properties:
            spec:
              properties:
                destination:
                  oneOf:
                  - required:
                    - pod
                    - namespace
                  - required:
                    - service
                    - namespace
                  - required:
                    - ip
                  properties:
                    ip:
                      format: ipv4
                      type: string
                    namespace:
                      type: string
                    pod:
                      type: string
                    service:
                      type: string
                  type: object
                packet:
                  properties:
                    ipHeader:
                      properties:
                        flags:
                          type: integer
                        protocol:
                          type: integer
                        srcIP:
                          format: ipv4
                          type: string
                        ttl:
                          type: integer
                      type: object
                    transportHeader:
                      properties:
                        icmp:
                          properties:
                            id:
                              type: integer
                            sequence:
                              type: integer
                          type: object
                        tcp:
                          properties:
                            dstPort:
                              type: integer
                            flags:
                              type: integer
                            srcPort:
                              type: integer
                          type: object
                        udp:
                          properties:
                            dstPort:
                              type: integer
                            srcPort:
                              type: integer
                          type: object
                      type: object
                  type: object
                source:
                  properties:
                    namespace:
                      type: string
                    pod:
                      type: string
                  required:
                  - pod
                  - namespace
                  type: object
              required:
              - source
              - destination
              type: object
            status:
              properties:
                dataplaneTag:
                  type: integer
                phase:
                  type: string
                reason:
                  type: string
                results:
                  items:
                    properties:
                      node:
                        type: string
                      observations:
                        items:
                          properties:
                            action:
                              type: string
                            component:
                              type: string
                            componentInfo:
                              type: string
                            dstMAC:
                              type: string
                            networkPolicy:
                              type: string
                            pod:
                              type: string
                            translatedDstIP:
                              type: string
                            translatedSrcIP:
                              type: string
                            ttl:
                              type: integer
                            tunnelDstIP:
                              type: string
                          type: object
                        type: array
                      role:
                        type: string
                      timestamp:
                        type: integer
                    type: object
                  type: array
              type: object
          required:
          - spec
          type: object
      versions:
      - name: v1alpha1
        served: true
        storage: true
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: antrea
      name: antctl
      namespace: kube-system
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: antrea
      name: antrea-agent
      namespace: kube-system
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: antrea
      name: antrea-controller
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app: antrea
      name: antctl
    rules:
    - apiGroups:
      - controlplane.antrea.tanzu.vmware.com
      resources:
      - networkpolicies
      - appliedtogroups
      - addressgroups
      verbs:
      - get
      - list
    - apiGroups:
      - system.antrea.tanzu.vmware.com
      resources:
      - controllerinfos
      - agentinfos
      verbs:
      - get
    - apiGroups:
      - system.antrea.tanzu.vmware.com
      resources:
      - supportbundles
      verbs:
      - get
      - post
    - apiGroups:
      - system.antrea.tanzu.vmware.com
      resources:
      - supportbundles/download
      verbs:
      - get
    - nonResourceURLs:
      - /agentinfo
      - /addressgroups
      - /appliedtogroups
      - /networkpolicies
      - /ovsflows
      - /ovstracing
      - /podinterfaces
      verbs:
      - get
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app: antrea
      name: antrea-agent
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - get
      - watch
      - list
    - apiGroups:
      - ""
      resources:
      - pods
      - endpoints
      - services
      verbs:
      - get
      - watch
      - list
    - apiGroups:
      - clusterinformation.antrea.tanzu.vmware.com
      resources:
      - antreaagentinfos
      verbs:
      - get
      - create
      - update
      - delete
    - apiGroups:
      - controlplane.antrea.tanzu.vmware.com
      resources:
      - networkpolicies
      - appliedtogroups
      - addressgroups
      verbs:
      - get
      - watch
      - list
    - apiGroups:
      - authentication.k8s.io
      resources:
      - tokenreviews
      verbs:
      - create
    - apiGroups:
      - authorization.k8s.io
      resources:
      - subjectaccessreviews
      verbs:
      - create
    - apiGroups:
      - ""
      resourceNames:
      - extension-apiserver-authentication
      resources:
      - configmaps
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resourceNames:
      - antrea-ca
      resources:
      - configmaps
      verbs:
      - get
      - watch
      - list
    - apiGroups:
      - ops.antrea.tanzu.vmware.com
      resources:
      - traceflows
      - traceflows/status
      verbs:
      - get
      - watch
      - list
      - update
      - patch
      - create
      - delete
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app: antrea
      name: antrea-controller
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      - pods
      - namespaces
      verbs:
      - get
      - watch
      - list
    - apiGroups:
      - networking.k8s.io
      resources:
      - networkpolicies
      verbs:
      - get
      - watch
      - list
    - apiGroups:
      - clusterinformation.antrea.tanzu.vmware.com
      resources:
      - antreacontrollerinfos
      verbs:
      - get
      - create
      - update
      - delete
    - apiGroups:
      - clusterinformation.antrea.tanzu.vmware.com
      resources:
      - antreaagentinfos
      verbs:
      - list
      - delete
    - apiGroups:
      - authentication.k8s.io
      resources:
      - tokenreviews
      verbs:
      - create
    - apiGroups:
      - authorization.k8s.io
      resources:
      - subjectaccessreviews
      verbs:
      - create
    - apiGroups:
      - ""
      resourceNames:
      - extension-apiserver-authentication
      resources:
      - configmaps
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resourceNames:
      - antrea-ca
      resources:
      - configmaps
      verbs:
      - get
      - update
    - apiGroups:
      - apiregistration.k8s.io
      resourceNames:
      - v1beta1.system.antrea.tanzu.vmware.com
      - v1beta1.controlplane.antrea.tanzu.vmware.com
      resources:
      - apiservices
      verbs:
      - get
      - update
    - apiGroups:
      - apiregistration.k8s.io
      resourceNames:
      - v1beta1.networking.antrea.tanzu.vmware.com
      resources:
      - apiservices
      verbs:
      - delete
    - apiGroups:
      - security.antrea.tanzu.vmware.com
      resources:
      - clusternetworkpolicies
      - networkpolicies
      verbs:
      - get
      - watch
      - list
    - apiGroups:
      - ops.antrea.tanzu.vmware.com
      resources:
      - traceflows
      - traceflows/status
      verbs:
      - get
      - watch
      - list
      - update
      - patch
      - create
      - delete
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app: antrea
      name: antctl
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: antctl
    subjects:
    - kind: ServiceAccount
      name: antctl
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app: antrea
      name: antrea-agent
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: antrea-agent
    subjects:
    - kind: ServiceAccount
      name: antrea-agent
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app: antrea
      name: antrea-controller
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: antrea-controller
    subjects:
    - kind: ServiceAccount
      name: antrea-controller
      namespace: kube-system
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app: antrea
      name: antrea-ca
      namespace: kube-system
    ---
    apiVersion: v1
    data:
      antrea-agent.conf: |
        # FeatureGates is a map of feature names to bools that enable or disable experimental features.
        featureGates:
        # Enable antrea proxy which provides ServiceLB for in-cluster services in antrea agent.
        # It should be enabled on Windows, otherwise NetworkPolicy will not take effect on
        # Service traffic.
        #  AntreaProxy: false
    
        # Enable traceflow which provides packet tracing feature to diagnose network issue.
        #  Traceflow: false
    
        # Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
        # to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
        # feature that supports priorities, rule actions and externalEntities in the future.
        #  AntreaPolicy: false
    
        # Enable flowexporter which exports polled conntrack connections as IPFIX flow records from each agent to a configured collector.
        #  FlowExporter: false
    
        # Name of the OpenVSwitch bridge antrea-agent will create and use.
        # Make sure it doesn't conflict with your existing OpenVSwitch bridges.
        #ovsBridge: br-int
    
        # Datapath type to use for the OpenVSwitch bridge created by Antrea. Supported values are:
        # - system
        # - netdev
        # 'system' is the default value and corresponds to the kernel datapath. Use 'netdev' to run
        # OVS in userspace mode. Userspace mode requires the tun device driver to be available.
        #ovsDatapathType: system
    
        # Name of the interface antrea-agent will create and use for host <--> pod communication.
        # Make sure it doesn't conflict with your existing interfaces.
        #hostGateway: antrea-gw0
    
        # Encapsulation mode for communication between Pods across Nodes, supported values:
        # - geneve (default)
        # - vxlan
        # - gre
        # - stt
        #tunnelType: geneve
    
        # Default MTU to use for the host gateway interface and the network interface of each Pod.
        # If omitted, antrea-agent will discover the MTU of the Node's primary interface and
        # also adjust MTU to accommodate for tunnel encapsulation overhead (if applicable).
        #defaultMTU: 1450
    
        # Whether or not to enable IPsec encryption of tunnel traffic. IPsec encryption is only supported
        # for the GRE tunnel type.
        #enableIPSecTunnel: false
    
        # ClusterIP CIDR range for Services. It's required when AntreaProxy is not enabled, and should be
        # set to the same value as the one specified by --service-cluster-ip-range for kube-apiserver. When
        # AntreaProxy is enabled, this parameter is not needed and will be ignored if provided.
        #serviceCIDR: 10.96.0.0/12
    
        # Determines how traffic is encapsulated. It has the following options
        # encap(default): Inter-node Pod traffic is always encapsulated and Pod to outbound traffic is masqueraded.
        # noEncap: Inter-node Pod traffic is not encapsulated, but Pod to outbound traffic is masqueraded.
        #          Underlying network must be capable of supporting Pod traffic across IP subnet.
        # hybrid: noEncap if worker Nodes on same subnet, otherwise encap.
        # networkPolicyOnly: Antrea enforces NetworkPolicy only, and utilizes CNI chaining and delegates Pod IPAM and connectivity to primary CNI.
        #
        #trafficEncapMode: encap
    
        # The port for the antrea-agent APIServer to serve on.
        # Note that if it's set to another value, the `containerPort` of the `api` port of the
        # `antrea-agent` container must be set to the same value.
        #apiPort: 10350
    
        # Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
        #enablePrometheusMetrics: false
    
        # Provide flow collector address as string with format <IP>:<port>[:<proto>], where proto is tcp or udp. This also enables
        # the flow exporter that sends IPFIX flow records of conntrack flows on OVS bridge. If no L4 transport proto is given,
        # we consider tcp as default.
        #flowCollectorAddr: ""
    
        # Provide flow poll interval as a duration string. This determines how often the flow exporter dumps connections from the conntrack module.
        # Flow poll interval should be greater than or equal to 1s (one second).
        # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
        #flowPollInterval: "5s"
    
        # Provide flow export frequency, which is the number of poll cycles elapsed before flow exporter exports flow records to
        # the flow collector.
        # Flow export frequency should be greater than or equal to 1.
        #flowExportFrequency: 12
      antrea-cni.conflist: |
        {
            "cniVersion":"0.3.0",
            "name": "antrea",
            "plugins": [
                {
                    "type": "antrea",
                    "ipam": {
                        "type": "host-local"
                    }
                },
                {
                    "type": "portmap",
                    "capabilities": {"portMappings": true}
                }
            ]
        }
      antrea-controller.conf: |
        # FeatureGates is a map of feature names to bools that enable or disable experimental features.
        featureGates:
        # Enable traceflow which provides packet tracing feature to diagnose network issue.
        #  Traceflow: false
    
        # Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
        # to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
        # feature that supports priorities, rule actions and externalEntities in the future.
        #  AntreaPolicy: false
    
        # The port for the antrea-controller APIServer to serve on.
        # Note that if it's set to another value, the `containerPort` of the `api` port of the
        # `antrea-controller` container must be set to the same value.
        #apiPort: 10349
    
        # Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
        #enablePrometheusMetrics: false
    
        # Indicates whether to use auto-generated self-signed TLS certificate.
        # If false, A Secret named "antrea-controller-tls" must be provided with the following keys:
        #   ca.crt: <CA certificate>
        #   tls.crt: <TLS certificate>
        #   tls.key: <TLS private key>
        # And the Secret must be mounted to directory "/var/run/antrea/antrea-controller-tls" of the
        # antrea-controller container.
        #selfSignedCert: true
    kind: ConfigMap
    metadata:
      annotations: {}
      labels:
        app: antrea
      name: antrea-config-mh8ghcmbh6
      namespace: kube-system
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: antrea
      name: antrea
      namespace: kube-system
    spec:
      ports:
      - port: 443
        protocol: TCP
        targetPort: api
      selector:
        app: antrea
        component: antrea-controller
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: antrea
        component: antrea-controller
      name: antrea-controller
      namespace: kube-system
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: antrea
          component: antrea-controller
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: antrea
            component: antrea-controller
        spec:
          containers:
          - args:
            - --config
            - /etc/antrea/antrea-controller.conf
            - --logtostderr=false
            - --log_dir=/var/log/antrea
            - --alsologtostderr
            - --log_file_max_size=100
            - --log_file_max_num=4
            command:
            - antrea-controller
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: antrea/antrea-ubuntu:latest
            imagePullPolicy: IfNotPresent
            name: antrea-controller
            ports:
            - containerPort: 10349
              name: api
              protocol: TCP
            readinessProbe:
              failureThreshold: 5
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: api
                scheme: HTTPS
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 5
            resources:
              requests:
                cpu: 200m
            volumeMounts:
            - mountPath: /etc/antrea/antrea-controller.conf
              name: antrea-config
              readOnly: true
              subPath: antrea-controller.conf
            - mountPath: /var/run/antrea/antrea-controller-tls
              name: antrea-controller-tls
            - mountPath: /var/log/antrea
              name: host-var-log-antrea
          hostNetwork: true
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-cluster-critical
          serviceAccountName: antrea-controller
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
          volumes:
          - configMap:
              name: antrea-config-mh8ghcmbh6
            name: antrea-config
          - name: antrea-controller-tls
            secret:
              defaultMode: 256
              optional: true
              secretName: antrea-controller-tls
          - hostPath:
              path: /var/log/antrea
              type: DirectoryOrCreate
            name: host-var-log-antrea
    ---
    apiVersion: apiregistration.k8s.io/v1
    kind: APIService
    metadata:
      labels:
        app: antrea
      name: v1beta1.controlplane.antrea.tanzu.vmware.com
    spec:
      group: controlplane.antrea.tanzu.vmware.com
      groupPriorityMinimum: 100
      service:
        name: antrea
        namespace: kube-system
      version: v1beta1
      versionPriority: 100
    ---
    apiVersion: apiregistration.k8s.io/v1
    kind: APIService
    metadata:
      labels:
        app: antrea
      name: v1beta1.system.antrea.tanzu.vmware.com
    spec:
      group: system.antrea.tanzu.vmware.com
      groupPriorityMinimum: 100
      service:
        name: antrea
        namespace: kube-system
      version: v1beta1
      versionPriority: 100
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app: antrea
        component: antrea-agent
      name: antrea-agent
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          app: antrea
          component: antrea-agent
      template:
        metadata:
          labels:
            app: antrea
            component: antrea-agent
        spec:
          containers:
          - args:
            - --config
            - /etc/antrea/antrea-agent.conf
            - --logtostderr=false
            - --log_dir=/var/log/antrea
            - --alsologtostderr
            - --log_file_max_size=100
            - --log_file_max_num=4
            command:
            - antrea-agent
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: antrea/antrea-ubuntu:latest
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /bin/sh
                - -c
                - container_liveness_probe agent
              failureThreshold: 5
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 5
            name: antrea-agent
            ports:
            - containerPort: 10350
              name: api
              protocol: TCP
            readinessProbe:
              failureThreshold: 5
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: api
                scheme: HTTPS
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 5
            resources:
              requests:
                cpu: 200m
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /etc/antrea/antrea-agent.conf
              name: antrea-config
              readOnly: true
              subPath: antrea-agent.conf
            - mountPath: /var/run/antrea
              name: host-var-run-antrea
            - mountPath: /var/run/openvswitch
              name: host-var-run-antrea
              subPath: openvswitch
            - mountPath: /var/lib/cni
              name: host-var-run-antrea
              subPath: cni
            - mountPath: /var/log/antrea
              name: host-var-log-antrea
            - mountPath: /host/proc
              name: host-proc
              readOnly: true
            - mountPath: /host/var/run/netns
              mountPropagation: HostToContainer
              name: host-var-run-netns
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
          - command:
            - start_ovs
            image: antrea/antrea-ubuntu:latest
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /bin/sh
                - -c
                - timeout 10 container_liveness_probe ovs
              failureThreshold: 5
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 10
            name: antrea-ovs
            resources:
              requests:
                cpu: 200m
            securityContext:
              capabilities:
                add:
                - SYS_NICE
                - NET_ADMIN
                - SYS_ADMIN
                - IPC_LOCK
            volumeMounts:
            - mountPath: /var/run/openvswitch
              name: host-var-run-antrea
              subPath: openvswitch
            - mountPath: /var/log/openvswitch
              name: host-var-log-antrea
              subPath: openvswitch
          hostNetwork: true
          initContainers:
          - command:
            - install_cni
            image: antrea/antrea-ubuntu:latest
            imagePullPolicy: IfNotPresent
            name: install-cni
            resources:
              requests:
                cpu: 100m
            securityContext:
              capabilities:
                add:
                - SYS_MODULE
            volumeMounts:
            - mountPath: /etc/antrea/antrea-cni.conflist
              name: antrea-config
              readOnly: true
              subPath: antrea-cni.conflist
            - mountPath: /host/etc/cni/net.d
              name: host-cni-conf
            - mountPath: /host/opt/cni/bin
              name: host-cni-bin
            - mountPath: /lib/modules
              name: host-lib-modules
              readOnly: true
            - mountPath: /sbin/depmod
              name: host-depmod
              readOnly: true
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-node-critical
          serviceAccountName: antrea-agent
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          - effect: NoExecute
            operator: Exists
          volumes:
          - configMap:
              name: antrea-config-mh8ghcmbh6
            name: antrea-config
          - hostPath:
              path: /etc/cni/net.d
            name: host-cni-conf
          - hostPath:
              path: /opt/cni/bin
            name: host-cni-bin
          - hostPath:
              path: /proc
            name: host-proc
          - hostPath:
              path: /var/run/netns
            name: host-var-run-netns
          - hostPath:
              path: /var/run/antrea
              type: DirectoryOrCreate
            name: host-var-run-antrea
          - hostPath:
              path: /var/log/antrea
              type: DirectoryOrCreate
            name: host-var-log-antrea
          - hostPath:
              path: /lib/modules
            name: host-lib-modules
          - hostPath:
              path: /sbin/depmod
            name: host-depmod
          - hostPath:
              path: /run/xtables.lock
              type: FileOrCreate
            name: xtables-lock
      updateStrategy:
        type: RollingUpdate
